# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: snowflake/v1/snowflake.proto, snowflake/v1/snowflake_service.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto
import grpclib


@dataclass
class Snowflake(betterproto.Message):
    """
    Snowflake represents a unique identifier generated by the Snowflake
    algorithm.
    """

    # 64-bit integer representation of the Snowflake ID. This is the primary
    # representation used in most applications and is more compact than the
    # string representation.
    int64_value: int = betterproto.int64_field(1)
    # String representation of the Snowflake ID. This is useful for systems that
    # cannot handle 64-bit integers, such as JavaScript.
    string_value: str = betterproto.string_field(2)


@dataclass
class NextSnowflakeRequest(betterproto.Message):
    """Request message for SnowflakeService."""

    wait: bool = betterproto.bool_field(1)


@dataclass
class NextSnowflakeResponse(betterproto.Message):
    """Response message for SnowflakeService."""

    snowflake: "Snowflake" = betterproto.message_field(1)


@dataclass
class BatchNextSnowflakeRequest(betterproto.Message):
    """Request message for batch Snowflake generation."""

    batch_size: int = betterproto.int32_field(1)
    wait: bool = betterproto.bool_field(2)


@dataclass
class BatchNextSnowflakeResponse(betterproto.Message):
    """Response message for batch Snowflake generation."""

    snowflakes: List["Snowflake"] = betterproto.message_field(1)


class SnowflakeServiceStub(betterproto.ServiceStub):
    """SnowflakeService provides methods to generate unique Snowflake IDs."""

    async def next_snowflake(self, *, wait: bool = False) -> NextSnowflakeResponse:
        """Generate the next unique Snowflake ID."""

        request = NextSnowflakeRequest()
        request.wait = wait

        return await self._unary_unary(
            "/snowflake.v1.SnowflakeService/NextSnowflake",
            request,
            NextSnowflakeResponse,
        )

    async def batch_next_snowflake(
        self, *, batch_size: int = 0, wait: bool = False
    ) -> BatchNextSnowflakeResponse:
        """Generate a batch of unique Snowflake IDs."""

        request = BatchNextSnowflakeRequest()
        request.batch_size = batch_size
        request.wait = wait

        return await self._unary_unary(
            "/snowflake.v1.SnowflakeService/BatchNextSnowflake",
            request,
            BatchNextSnowflakeResponse,
        )
