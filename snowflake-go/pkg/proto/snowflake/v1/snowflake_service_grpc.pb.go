// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: snowflake/v1/snowflake_service.proto

package snowflakev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SnowflakeService_NextSnowflake_FullMethodName      = "/snowflake.v1.SnowflakeService/NextSnowflake"
	SnowflakeService_BatchNextSnowflake_FullMethodName = "/snowflake.v1.SnowflakeService/BatchNextSnowflake"
)

// SnowflakeServiceClient is the client API for SnowflakeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SnowflakeService provides methods to generate unique Snowflake IDs.
type SnowflakeServiceClient interface {
	// Generate the next unique Snowflake ID.
	NextSnowflake(ctx context.Context, in *NextSnowflakeRequest, opts ...grpc.CallOption) (*NextSnowflakeResponse, error)
	// Generate a batch of unique Snowflake IDs.
	BatchNextSnowflake(ctx context.Context, in *BatchNextSnowflakeRequest, opts ...grpc.CallOption) (*BatchNextSnowflakeResponse, error)
}

type snowflakeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnowflakeServiceClient(cc grpc.ClientConnInterface) SnowflakeServiceClient {
	return &snowflakeServiceClient{cc}
}

func (c *snowflakeServiceClient) NextSnowflake(ctx context.Context, in *NextSnowflakeRequest, opts ...grpc.CallOption) (*NextSnowflakeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NextSnowflakeResponse)
	err := c.cc.Invoke(ctx, SnowflakeService_NextSnowflake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snowflakeServiceClient) BatchNextSnowflake(ctx context.Context, in *BatchNextSnowflakeRequest, opts ...grpc.CallOption) (*BatchNextSnowflakeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchNextSnowflakeResponse)
	err := c.cc.Invoke(ctx, SnowflakeService_BatchNextSnowflake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnowflakeServiceServer is the server API for SnowflakeService service.
// All implementations must embed UnimplementedSnowflakeServiceServer
// for forward compatibility.
//
// SnowflakeService provides methods to generate unique Snowflake IDs.
type SnowflakeServiceServer interface {
	// Generate the next unique Snowflake ID.
	NextSnowflake(context.Context, *NextSnowflakeRequest) (*NextSnowflakeResponse, error)
	// Generate a batch of unique Snowflake IDs.
	BatchNextSnowflake(context.Context, *BatchNextSnowflakeRequest) (*BatchNextSnowflakeResponse, error)
	mustEmbedUnimplementedSnowflakeServiceServer()
}

// UnimplementedSnowflakeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSnowflakeServiceServer struct{}

func (UnimplementedSnowflakeServiceServer) NextSnowflake(context.Context, *NextSnowflakeRequest) (*NextSnowflakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextSnowflake not implemented")
}
func (UnimplementedSnowflakeServiceServer) BatchNextSnowflake(context.Context, *BatchNextSnowflakeRequest) (*BatchNextSnowflakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchNextSnowflake not implemented")
}
func (UnimplementedSnowflakeServiceServer) mustEmbedUnimplementedSnowflakeServiceServer() {}
func (UnimplementedSnowflakeServiceServer) testEmbeddedByValue()                          {}

// UnsafeSnowflakeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnowflakeServiceServer will
// result in compilation errors.
type UnsafeSnowflakeServiceServer interface {
	mustEmbedUnimplementedSnowflakeServiceServer()
}

func RegisterSnowflakeServiceServer(s grpc.ServiceRegistrar, srv SnowflakeServiceServer) {
	// If the following call pancis, it indicates UnimplementedSnowflakeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SnowflakeService_ServiceDesc, srv)
}

func _SnowflakeService_NextSnowflake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextSnowflakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowflakeServiceServer).NextSnowflake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnowflakeService_NextSnowflake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowflakeServiceServer).NextSnowflake(ctx, req.(*NextSnowflakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnowflakeService_BatchNextSnowflake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchNextSnowflakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowflakeServiceServer).BatchNextSnowflake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnowflakeService_BatchNextSnowflake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowflakeServiceServer).BatchNextSnowflake(ctx, req.(*BatchNextSnowflakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SnowflakeService_ServiceDesc is the grpc.ServiceDesc for SnowflakeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnowflakeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snowflake.v1.SnowflakeService",
	HandlerType: (*SnowflakeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NextSnowflake",
			Handler:    _SnowflakeService_NextSnowflake_Handler,
		},
		{
			MethodName: "BatchNextSnowflake",
			Handler:    _SnowflakeService_BatchNextSnowflake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snowflake/v1/snowflake_service.proto",
}
